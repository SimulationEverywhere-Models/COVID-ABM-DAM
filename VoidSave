/****************************************************/

/******XML Student Behaviour Structures*****************/

/***************************************************/

class DecisionMakerBehaviour{

public:

  DecisionMakerBehaviour() = default;

  string                          BannerId;
  string                          studentType;
  boo                             on-Campus;  

  string                          Location;
  string                          Size;
  string                          Group;
  long                            PersonId;
  bool                            isSick;
  string                          SafeDistanceProbability;
  string                          MaskProbability;

  vector<personId>                relationships; 
  vector<string>                  relationshipType  

  

  

  void save(const char* pFilename){

      TiXmlDocument doc;  

      TiXmlDeclaration* decl = new TiXmlDeclaration( "1.0", "", "" );  

      doc.LinkEndChild(decl); 

     

      TiXmlElement * root = new TiXmlElement("DecisionMakerBehaviour");  

      doc.LinkEndChild( root );  

      // block: bannerId

        {           

          TiXmlElement * pbannerId = new TiXmlElement( "bannerId" );          

          pbannerId->LinkEndChild(new TiXmlText(id.c_str()));

          root->LinkEndChild( pbannerId );  

        }

      // block: Location

        {           

          TiXmlElement * pLocation = new TiXmlElement( "Location" );          

          pLocation->LinkEndChild(new TiXmlText(location.c_str()));

          root->LinkEndChild( pLocation );  

        }

      

      // block: Size

        {    

          TiXmlElement * pSize = new TiXmlElement( "Size" );          

          pSize->LinkEndChild(new TiXmlText(Size.c_str()));

          root->LinkEndChild( pSize );  

        }

      // block: PersonId

        {    

          TiXmlElement * pPersonId = new TiXmlElement( "PersonId" );          

          pPersonId->LinkEndChild(new TiXmlText(PersonId.c_str()));

          root->LinkEndChild( pPersonId );   

        }      

         // block: Relationships
        {    
          vector<string>::iterator iter;
          TiXmlElement * RelationshipsNode = new TiXmlElement("Relationships");
          root ->LinkEndChild(RelationshipsNode);
          for (iter=Relationships.begin(); iter != Relationships.end(); iter++)
          {
            const string& w=*iter;      
            TiXmlElement * priorityD = new TiXmlElement( "Relationships" );
            RelationshipsNode->LinkEndChild( Relationships );
            Relationships->SetAttribute("Personid", w.c_str());          
          }
        }      

      // block: RelationshipType

        {    
          vector<Relationship>::iterator iter;
          TiXmlElement * RelationshipTypeNode = new TiXmlElement("RelationshipType");
          root ->LinkEndChild(RelationshipTypeNode);
          for (iter=RelationshipTypeNode.begin(); iter != RelationshipTypeNode.end(); iter++)
          { 
            const RelationshipType& w=*iter;
            TiXmlElement * Relations = new TiXmlElement("Relations");
            RelationshipTypeNode ->LinkEndChild(Relations);
            Relations->SetAttribute("personid", w.personId.c_str()); 
            
          }
        }      
      // block: isSick

        {    

          TiXmlElement * pisSick = new TiXmlElement( "isSick" );
          if (!pisSick) return
          const bool* pisSick = root->LinkEndChild( pisSick );             
          if (isSick) isSick = pisSick;
        }      

      // block: SaveDistanceProbability

        {    

          TiXmlElement * pSaveDistanceProbability = new TiXmlElement( "SaveDistanceProbability" );          

          pSaveDistanceProbability->LinkEndChild(new TiXmlText(SaveDistanceProbability.c_str()));

          root->LinkEndChild( pSaveDistanceProbability ); 

        }      

      // block: MaskProbability

        {    

          TiXmlElement * pMaskProbability = new TiXmlElement( "MaskProbability" );          

          pMaskProbability->LinkEndChild(new TiXmlText(MaskProbability.c_str()));

          root->LinkEndChild( pMaskProbability ); 

        }

      // block: Group

        {    

          TiXmlElement * pGroup = new TiXmlElement( "Group" );          

          pGroup->LinkEndChild(new TiXmlText(Group.c_str()));

          root->LinkEndChild( pGroup ); 

        }
